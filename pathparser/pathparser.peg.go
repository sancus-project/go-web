package pathparser

// Code generated by peg -inline -switch -output pathparser.peg.go pathparser.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulepath
	ruleexpr
	rulesegment
	ruleoptional
	rulecapture
	rulename
	rulevalues
	ruleoption
	rulestar
	ruleliteral
	ruleliteral_chars
	ruleslash
	rulebo
	ruleeo
	rulebc
	ruleec
	rulealpha
	rulenum
	ruleset0
	ruleset1
	ruleany
	ruleeos
	rulePegText
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
)

var rul3s = [...]string{
	"Unknown",
	"path",
	"expr",
	"segment",
	"optional",
	"capture",
	"name",
	"values",
	"option",
	"star",
	"literal",
	"literal_chars",
	"slash",
	"bo",
	"eo",
	"bc",
	"ec",
	"alpha",
	"num",
	"set0",
	"set1",
	"any",
	"eos",
	"PegText",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Peg struct {
	Path

	Buffer string
	buffer []rune
	rules  [34]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Peg) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Peg) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Peg
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Peg) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Peg) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Peg) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Peg) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.addNode(nodeCaptureIdentifier, text)
		case ruleAction1:
			p.addNode(nodeCaptureOption, text)
		case ruleAction2:
			p.addNode(nodeSpecial, "[^/]+")
		case ruleAction3:
			p.addNode(nodeLiteral, text)
		case ruleAction4:
			p.addNode(nodeLiteral, "\\.")
		case ruleAction5:
			p.addNode(nodeLiteral, "/")
		case ruleAction6:
			p.beginOptional()
		case ruleAction7:
			p.endOptional()
		case ruleAction8:
			p.beginCapture()
		case ruleAction9:
			p.endCapture()

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Peg) error {
	return func(p *Peg) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Peg) error {
	return func(p *Peg) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Peg) Init(options ...func(*Peg) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 path <- <(segment+ slash? eos)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulesegment]() {
					goto l0
				}
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[rulesegment]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				{
					position4, tokenIndex4 := position, tokenIndex
					if !_rules[ruleslash]() {
						goto l4
					}
					goto l5
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
			l5:
				{
					position6 := position
					{
						position7, tokenIndex7 := position, tokenIndex
						if !matchDot() {
							goto l7
						}
						goto l0
					l7:
						position, tokenIndex = position7, tokenIndex7
					}
					add(ruleeos, position6)
				}
				add(rulepath, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 expr <- <((&('*') star) | (&('{') capture) | (&('[') optional) | (&('%' | '+' | ',' | '-' | '.' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '_' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') literal))> */
		func() bool {
			position8, tokenIndex8 := position, tokenIndex
			{
				position9 := position
				{
					switch buffer[position] {
					case '*':
						{
							position11 := position
							if buffer[position] != rune('*') {
								goto l8
							}
							position++
							{
								add(ruleAction2, position)
							}
							add(rulestar, position11)
						}
					case '{':
						{
							position13 := position
							{
								position14 := position
								if buffer[position] != rune('{') {
									goto l8
								}
								position++
								{
									add(ruleAction8, position)
								}
								add(rulebc, position14)
							}
							{
								position16 := position
								{
									position17 := position
									if !_rules[rulealpha]() {
										goto l8
									}
								l18:
									{
										position19, tokenIndex19 := position, tokenIndex
										if !_rules[ruleset0]() {
											goto l19
										}
										goto l18
									l19:
										position, tokenIndex = position19, tokenIndex19
									}
									add(rulePegText, position17)
								}
								{
									add(ruleAction0, position)
								}
								add(rulename, position16)
							}
							{
								position21, tokenIndex21 := position, tokenIndex
								if buffer[position] != rune(':') {
									goto l21
								}
								position++
								{
									position23 := position
									if !_rules[ruleoption]() {
										goto l21
									}
								l24:
									{
										position25, tokenIndex25 := position, tokenIndex
										if buffer[position] != rune('|') {
											goto l25
										}
										position++
										if !_rules[ruleoption]() {
											goto l25
										}
										goto l24
									l25:
										position, tokenIndex = position25, tokenIndex25
									}
									add(rulevalues, position23)
								}
								goto l22
							l21:
								position, tokenIndex = position21, tokenIndex21
							}
						l22:
							{
								position26 := position
								if buffer[position] != rune('}') {
									goto l8
								}
								position++
								{
									add(ruleAction9, position)
								}
								add(ruleec, position26)
							}
							add(rulecapture, position13)
						}
					case '[':
						{
							position28 := position
							{
								position29 := position
								if buffer[position] != rune('[') {
									goto l8
								}
								position++
								{
									add(ruleAction6, position)
								}
								add(rulebo, position29)
							}
							if !_rules[ruleexpr]() {
								goto l8
							}
						l31:
							{
								position32, tokenIndex32 := position, tokenIndex
								if !_rules[rulesegment]() {
									goto l32
								}
								goto l31
							l32:
								position, tokenIndex = position32, tokenIndex32
							}
							{
								position33 := position
								if buffer[position] != rune(']') {
									goto l8
								}
								position++
								{
									add(ruleAction7, position)
								}
								add(ruleeo, position33)
							}
							add(ruleoptional, position28)
						}
					default:
						{
							position35 := position
							{
								position38 := position
								{
									position39, tokenIndex39 := position, tokenIndex
									{
										position41 := position
										if !_rules[ruleset1]() {
											goto l40
										}
									l42:
										{
											position43, tokenIndex43 := position, tokenIndex
											if !_rules[ruleset1]() {
												goto l43
											}
											goto l42
										l43:
											position, tokenIndex = position43, tokenIndex43
										}
										add(rulePegText, position41)
									}
									{
										add(ruleAction3, position)
									}
									goto l39
								l40:
									position, tokenIndex = position39, tokenIndex39
									if buffer[position] != rune('.') {
										goto l8
									}
									position++
									{
										add(ruleAction4, position)
									}
								}
							l39:
								add(ruleliteral_chars, position38)
							}
						l36:
							{
								position37, tokenIndex37 := position, tokenIndex
								{
									position46 := position
									{
										position47, tokenIndex47 := position, tokenIndex
										{
											position49 := position
											if !_rules[ruleset1]() {
												goto l48
											}
										l50:
											{
												position51, tokenIndex51 := position, tokenIndex
												if !_rules[ruleset1]() {
													goto l51
												}
												goto l50
											l51:
												position, tokenIndex = position51, tokenIndex51
											}
											add(rulePegText, position49)
										}
										{
											add(ruleAction3, position)
										}
										goto l47
									l48:
										position, tokenIndex = position47, tokenIndex47
										if buffer[position] != rune('.') {
											goto l37
										}
										position++
										{
											add(ruleAction4, position)
										}
									}
								l47:
									add(ruleliteral_chars, position46)
								}
								goto l36
							l37:
								position, tokenIndex = position37, tokenIndex37
							}
							add(ruleliteral, position35)
						}
					}
				}

				add(ruleexpr, position9)
			}
			return true
		l8:
			position, tokenIndex = position8, tokenIndex8
			return false
		},
		/* 2 segment <- <(slash expr)> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				if !_rules[ruleslash]() {
					goto l54
				}
				if !_rules[ruleexpr]() {
					goto l54
				}
				add(rulesegment, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 3 optional <- <(bo expr segment* eo)> */
		nil,
		/* 4 capture <- <(bc name (':' values)? ec)> */
		nil,
		/* 5 name <- <(<(alpha set0*)> Action0)> */
		nil,
		/* 6 values <- <(option ('|' option)*)> */
		nil,
		/* 7 option <- <(<any+> Action1)> */
		func() bool {
			position60, tokenIndex60 := position, tokenIndex
			{
				position61 := position
				{
					position62 := position
					{
						position65 := position
						{
							switch buffer[position] {
							case '\\':
								if buffer[position] != rune('\\') {
									goto l60
								}
								position++
							case '.':
								if buffer[position] != rune('.') {
									goto l60
								}
								position++
							default:
								if !_rules[ruleset1]() {
									goto l60
								}
							}
						}

						add(ruleany, position65)
					}
				l63:
					{
						position64, tokenIndex64 := position, tokenIndex
						{
							position67 := position
							{
								switch buffer[position] {
								case '\\':
									if buffer[position] != rune('\\') {
										goto l64
									}
									position++
								case '.':
									if buffer[position] != rune('.') {
										goto l64
									}
									position++
								default:
									if !_rules[ruleset1]() {
										goto l64
									}
								}
							}

							add(ruleany, position67)
						}
						goto l63
					l64:
						position, tokenIndex = position64, tokenIndex64
					}
					add(rulePegText, position62)
				}
				{
					add(ruleAction1, position)
				}
				add(ruleoption, position61)
			}
			return true
		l60:
			position, tokenIndex = position60, tokenIndex60
			return false
		},
		/* 8 star <- <('*' Action2)> */
		nil,
		/* 9 literal <- <literal_chars+> */
		nil,
		/* 10 literal_chars <- <((<set1+> Action3) / ('.' Action4))> */
		nil,
		/* 11 slash <- <('/' Action5)> */
		func() bool {
			position73, tokenIndex73 := position, tokenIndex
			{
				position74 := position
				if buffer[position] != rune('/') {
					goto l73
				}
				position++
				{
					add(ruleAction5, position)
				}
				add(ruleslash, position74)
			}
			return true
		l73:
			position, tokenIndex = position73, tokenIndex73
			return false
		},
		/* 12 bo <- <('[' Action6)> */
		nil,
		/* 13 eo <- <(']' Action7)> */
		nil,
		/* 14 bc <- <('{' Action8)> */
		nil,
		/* 15 ec <- <('}' Action9)> */
		nil,
		/* 16 alpha <- <([a-z] / [A-Z])> */
		func() bool {
			position80, tokenIndex80 := position, tokenIndex
			{
				position81 := position
				{
					position82, tokenIndex82 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l83
					}
					position++
					goto l82
				l83:
					position, tokenIndex = position82, tokenIndex82
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l80
					}
					position++
				}
			l82:
				add(rulealpha, position81)
			}
			return true
		l80:
			position, tokenIndex = position80, tokenIndex80
			return false
		},
		/* 17 num <- <[0-9]> */
		nil,
		/* 18 set0 <- <((&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') num) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') alpha))> */
		func() bool {
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				{
					switch buffer[position] {
					case '_':
						if buffer[position] != rune('_') {
							goto l85
						}
						position++
					case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
						{
							position88 := position
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l85
							}
							position++
							add(rulenum, position88)
						}
					default:
						if !_rules[rulealpha]() {
							goto l85
						}
					}
				}

				add(ruleset0, position86)
			}
			return true
		l85:
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 19 set1 <- <((&('%') '%') | (&(',') ',') | (&('+') '+') | (&('-') '-') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '_' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') set0))> */
		func() bool {
			position89, tokenIndex89 := position, tokenIndex
			{
				position90 := position
				{
					switch buffer[position] {
					case '%':
						if buffer[position] != rune('%') {
							goto l89
						}
						position++
					case ',':
						if buffer[position] != rune(',') {
							goto l89
						}
						position++
					case '+':
						if buffer[position] != rune('+') {
							goto l89
						}
						position++
					case '-':
						if buffer[position] != rune('-') {
							goto l89
						}
						position++
					default:
						if !_rules[ruleset0]() {
							goto l89
						}
					}
				}

				add(ruleset1, position90)
			}
			return true
		l89:
			position, tokenIndex = position89, tokenIndex89
			return false
		},
		/* 20 any <- <((&('\\') '\\') | (&('.') '.') | (&('%' | '+' | ',' | '-' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '_' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') set1))> */
		nil,
		/* 21 eos <- <!.> */
		nil,
		nil,
		/* 24 Action0 <- <{ p.addNode(nodeCaptureIdentifier, text) }> */
		nil,
		/* 25 Action1 <- <{ p.addNode(nodeCaptureOption, text) }> */
		nil,
		/* 26 Action2 <- <{ p.addNode(nodeSpecial, "[^/]+") }> */
		nil,
		/* 27 Action3 <- <{ p.addNode(nodeLiteral, text) }> */
		nil,
		/* 28 Action4 <- <{ p.addNode(nodeLiteral, "\\.") }> */
		nil,
		/* 29 Action5 <- <{ p.addNode(nodeLiteral, "/") }> */
		nil,
		/* 30 Action6 <- <{ p.beginOptional() }> */
		nil,
		/* 31 Action7 <- <{ p.endOptional() }> */
		nil,
		/* 32 Action8 <- <{ p.beginCapture() }> */
		nil,
		/* 33 Action9 <- <{ p.endCapture() }> */
		nil,
	}
	p.rules = _rules
	return nil
}
