#!/bin/sh

set -eu

F="${0%.sh}.go"
trap "rm -f '$F~'" EXIT
exec > "$F~"

cat <<EOT
package forms

//go:generate $0

import (
	"net/http"
	"strconv"

	"go.sancus.dev/core/typeconv"
)

// Code generated by $0 DO NOT EDIT
EOT

generate_base() {
	local t0="$(echo "$N" | tr A-Z a-z)64"

	cat <<EOT

func formValue$N(req *http.Request, key string$extra_args) ($t0, error, bool) {
	var v $t0

	s, err, ok := FormValue(req, key)
	if ok && err == nil {
		v, err = strconv.Parse$N(s$extra, $S)
	}

	return v, err, ok
}
EOT
}

generate() {
	local N="$1" S="$2"
	local n="$N$S"
	local t="$(echo "$n" | tr A-Z a-z)"
	local extra_args= extra= prev=
	shift 2

	if [ -n "${1:-}" ]; then
		extra_args=", $1"
		extra="$(echo "$1" | tr ',' '\n' | sed -e 's|^ \+||' -e 's| \+$||' | cut -d' ' -f1 | sed -e 's|^|, |' | tr -d '\n')"
	fi

	if [ -z "$S" ]; then
		extra_args="$extra_args, bitsize int" S=bitsize generate_base

		if [ float = "$t" ]; then
			return
		fi

		S=typeconv.IntSize
	fi

cat <<EOT

func FormValue$n(req *http.Request, key string$extra_args) ($t, error, bool) {
	v, err, ok := formValue$N(req, key$extra, $S)
	return $t(v), err, ok
}
EOT
}

for x in Float; do
	for n in '' 32; do
		generate "$x" "$n"
	done
done

for x in Int Uint; do
	for n in '' 8 16 32; do
		generate "$x" "$n" "base int"
	done
done

if ! cmp -s "$F" "$F~"; then
	mv "$F~" "$F"
fi
